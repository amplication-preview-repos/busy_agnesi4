/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Usage } from "./Usage";
import { UsageCountArgs } from "./UsageCountArgs";
import { UsageFindManyArgs } from "./UsageFindManyArgs";
import { UsageFindUniqueArgs } from "./UsageFindUniqueArgs";
import { CreateUsageArgs } from "./CreateUsageArgs";
import { UpdateUsageArgs } from "./UpdateUsageArgs";
import { DeleteUsageArgs } from "./DeleteUsageArgs";
import { Meter } from "../../meter/base/Meter";
import { UsageService } from "../usage.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Usage)
export class UsageResolverBase {
  constructor(
    protected readonly service: UsageService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Usage",
    action: "read",
    possession: "any",
  })
  async _usagesMeta(
    @graphql.Args() args: UsageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Usage])
  @nestAccessControl.UseRoles({
    resource: "Usage",
    action: "read",
    possession: "any",
  })
  async usages(@graphql.Args() args: UsageFindManyArgs): Promise<Usage[]> {
    return this.service.usages(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Usage, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Usage",
    action: "read",
    possession: "own",
  })
  async usage(
    @graphql.Args() args: UsageFindUniqueArgs
  ): Promise<Usage | null> {
    const result = await this.service.usage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Usage)
  @nestAccessControl.UseRoles({
    resource: "Usage",
    action: "create",
    possession: "any",
  })
  async createUsage(@graphql.Args() args: CreateUsageArgs): Promise<Usage> {
    return await this.service.createUsage({
      ...args,
      data: {
        ...args.data,

        meter: args.data.meter
          ? {
              connect: args.data.meter,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Usage)
  @nestAccessControl.UseRoles({
    resource: "Usage",
    action: "update",
    possession: "any",
  })
  async updateUsage(
    @graphql.Args() args: UpdateUsageArgs
  ): Promise<Usage | null> {
    try {
      return await this.service.updateUsage({
        ...args,
        data: {
          ...args.data,

          meter: args.data.meter
            ? {
                connect: args.data.meter,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Usage)
  @nestAccessControl.UseRoles({
    resource: "Usage",
    action: "delete",
    possession: "any",
  })
  async deleteUsage(
    @graphql.Args() args: DeleteUsageArgs
  ): Promise<Usage | null> {
    try {
      return await this.service.deleteUsage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Meter, {
    nullable: true,
    name: "meter",
  })
  @nestAccessControl.UseRoles({
    resource: "Meter",
    action: "read",
    possession: "any",
  })
  async getMeter(@graphql.Parent() parent: Usage): Promise<Meter | null> {
    const result = await this.service.getMeter(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
