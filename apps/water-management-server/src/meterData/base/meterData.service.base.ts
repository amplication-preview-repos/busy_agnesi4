/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MeterData as PrismaMeterData,
  PrepaidMeter as PrismaPrepaidMeter,
} from "@prisma/client";

export class MeterDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MeterDataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.meterData.count(args);
  }

  async meterDataItems(
    args: Prisma.MeterDataFindManyArgs
  ): Promise<PrismaMeterData[]> {
    return this.prisma.meterData.findMany(args);
  }
  async meterData(
    args: Prisma.MeterDataFindUniqueArgs
  ): Promise<PrismaMeterData | null> {
    return this.prisma.meterData.findUnique(args);
  }
  async createMeterData(
    args: Prisma.MeterDataCreateArgs
  ): Promise<PrismaMeterData> {
    return this.prisma.meterData.create(args);
  }
  async updateMeterData(
    args: Prisma.MeterDataUpdateArgs
  ): Promise<PrismaMeterData> {
    return this.prisma.meterData.update(args);
  }
  async deleteMeterData(
    args: Prisma.MeterDataDeleteArgs
  ): Promise<PrismaMeterData> {
    return this.prisma.meterData.delete(args);
  }

  async getPrepaidMeter(parentId: string): Promise<PrismaPrepaidMeter | null> {
    return this.prisma.meterData
      .findUnique({
        where: { id: parentId },
      })
      .prepaidMeter();
  }
}
