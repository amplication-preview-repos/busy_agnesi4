/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MeterData } from "./MeterData";
import { MeterDataCountArgs } from "./MeterDataCountArgs";
import { MeterDataFindManyArgs } from "./MeterDataFindManyArgs";
import { MeterDataFindUniqueArgs } from "./MeterDataFindUniqueArgs";
import { CreateMeterDataArgs } from "./CreateMeterDataArgs";
import { UpdateMeterDataArgs } from "./UpdateMeterDataArgs";
import { DeleteMeterDataArgs } from "./DeleteMeterDataArgs";
import { PrepaidMeter } from "../../prepaidMeter/base/PrepaidMeter";
import { MeterDataService } from "../meterData.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MeterData)
export class MeterDataResolverBase {
  constructor(
    protected readonly service: MeterDataService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MeterData",
    action: "read",
    possession: "any",
  })
  async _meterDataItemsMeta(
    @graphql.Args() args: MeterDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MeterData])
  @nestAccessControl.UseRoles({
    resource: "MeterData",
    action: "read",
    possession: "any",
  })
  async meterDataItems(
    @graphql.Args() args: MeterDataFindManyArgs
  ): Promise<MeterData[]> {
    return this.service.meterDataItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MeterData, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MeterData",
    action: "read",
    possession: "own",
  })
  async meterData(
    @graphql.Args() args: MeterDataFindUniqueArgs
  ): Promise<MeterData | null> {
    const result = await this.service.meterData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MeterData)
  @nestAccessControl.UseRoles({
    resource: "MeterData",
    action: "create",
    possession: "any",
  })
  async createMeterData(
    @graphql.Args() args: CreateMeterDataArgs
  ): Promise<MeterData> {
    return await this.service.createMeterData({
      ...args,
      data: {
        ...args.data,

        prepaidMeter: args.data.prepaidMeter
          ? {
              connect: args.data.prepaidMeter,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MeterData)
  @nestAccessControl.UseRoles({
    resource: "MeterData",
    action: "update",
    possession: "any",
  })
  async updateMeterData(
    @graphql.Args() args: UpdateMeterDataArgs
  ): Promise<MeterData | null> {
    try {
      return await this.service.updateMeterData({
        ...args,
        data: {
          ...args.data,

          prepaidMeter: args.data.prepaidMeter
            ? {
                connect: args.data.prepaidMeter,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MeterData)
  @nestAccessControl.UseRoles({
    resource: "MeterData",
    action: "delete",
    possession: "any",
  })
  async deleteMeterData(
    @graphql.Args() args: DeleteMeterDataArgs
  ): Promise<MeterData | null> {
    try {
      return await this.service.deleteMeterData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PrepaidMeter, {
    nullable: true,
    name: "prepaidMeter",
  })
  @nestAccessControl.UseRoles({
    resource: "PrepaidMeter",
    action: "read",
    possession: "any",
  })
  async getPrepaidMeter(
    @graphql.Parent() parent: MeterData
  ): Promise<PrepaidMeter | null> {
    const result = await this.service.getPrepaidMeter(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
