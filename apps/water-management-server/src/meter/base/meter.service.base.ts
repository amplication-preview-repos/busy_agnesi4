/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Meter as PrismaMeter,
  Usage as PrismaUsage,
  User as PrismaUser,
} from "@prisma/client";

export class MeterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MeterCountArgs, "select">): Promise<number> {
    return this.prisma.meter.count(args);
  }

  async meters(args: Prisma.MeterFindManyArgs): Promise<PrismaMeter[]> {
    return this.prisma.meter.findMany(args);
  }
  async meter(args: Prisma.MeterFindUniqueArgs): Promise<PrismaMeter | null> {
    return this.prisma.meter.findUnique(args);
  }
  async createMeter(args: Prisma.MeterCreateArgs): Promise<PrismaMeter> {
    return this.prisma.meter.create(args);
  }
  async updateMeter(args: Prisma.MeterUpdateArgs): Promise<PrismaMeter> {
    return this.prisma.meter.update(args);
  }
  async deleteMeter(args: Prisma.MeterDeleteArgs): Promise<PrismaMeter> {
    return this.prisma.meter.delete(args);
  }

  async findUsages(
    parentId: string,
    args: Prisma.UsageFindManyArgs
  ): Promise<PrismaUsage[]> {
    return this.prisma.meter
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .usages(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.meter
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
