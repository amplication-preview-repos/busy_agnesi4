/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Meter } from "./Meter";
import { MeterCountArgs } from "./MeterCountArgs";
import { MeterFindManyArgs } from "./MeterFindManyArgs";
import { MeterFindUniqueArgs } from "./MeterFindUniqueArgs";
import { CreateMeterArgs } from "./CreateMeterArgs";
import { UpdateMeterArgs } from "./UpdateMeterArgs";
import { DeleteMeterArgs } from "./DeleteMeterArgs";
import { UsageFindManyArgs } from "../../usage/base/UsageFindManyArgs";
import { Usage } from "../../usage/base/Usage";
import { User } from "../../user/base/User";
import { MeterService } from "../meter.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Meter)
export class MeterResolverBase {
  constructor(
    protected readonly service: MeterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Meter",
    action: "read",
    possession: "any",
  })
  async _metersMeta(
    @graphql.Args() args: MeterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Meter])
  @nestAccessControl.UseRoles({
    resource: "Meter",
    action: "read",
    possession: "any",
  })
  async meters(@graphql.Args() args: MeterFindManyArgs): Promise<Meter[]> {
    return this.service.meters(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Meter, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Meter",
    action: "read",
    possession: "own",
  })
  async meter(
    @graphql.Args() args: MeterFindUniqueArgs
  ): Promise<Meter | null> {
    const result = await this.service.meter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Meter)
  @nestAccessControl.UseRoles({
    resource: "Meter",
    action: "create",
    possession: "any",
  })
  async createMeter(@graphql.Args() args: CreateMeterArgs): Promise<Meter> {
    return await this.service.createMeter({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Meter)
  @nestAccessControl.UseRoles({
    resource: "Meter",
    action: "update",
    possession: "any",
  })
  async updateMeter(
    @graphql.Args() args: UpdateMeterArgs
  ): Promise<Meter | null> {
    try {
      return await this.service.updateMeter({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Meter)
  @nestAccessControl.UseRoles({
    resource: "Meter",
    action: "delete",
    possession: "any",
  })
  async deleteMeter(
    @graphql.Args() args: DeleteMeterArgs
  ): Promise<Meter | null> {
    try {
      return await this.service.deleteMeter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Usage], { name: "usages" })
  @nestAccessControl.UseRoles({
    resource: "Usage",
    action: "read",
    possession: "any",
  })
  async findUsages(
    @graphql.Parent() parent: Meter,
    @graphql.Args() args: UsageFindManyArgs
  ): Promise<Usage[]> {
    const results = await this.service.findUsages(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Meter): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
